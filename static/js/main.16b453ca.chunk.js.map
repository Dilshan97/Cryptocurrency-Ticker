{"version":3,"sources":["components/Cryptocurrency.js","components/Tickers.js","App.js","serviceWorker.js","index.js"],"names":["Cryptocurrency","_this$props$data","this","props","data","id","name","symbol","price_usd","percent_change_1h","percent_change_24h","percent_change_7d","react_default","a","createElement","className","toFixed","Component","Tickers","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetchCryptocurrencyData","interval","setInterval","_this3","axios","get","then","response","wanted","result","filter","currency","includes","setState","catch","err","console","log","tickers","map","src_components_Cryptocurrency","key","App","src_components_Tickers","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yTA4BeA,gMAtBH,IAAAC,EASAC,KAAKC,MAAMC,KAPXC,EAFAJ,EAEAI,GACAC,EAHAL,EAGAK,KACAC,EAJAN,EAIAM,OACAC,EALAP,EAKAO,UACAC,EANAR,EAMAQ,kBACAC,EAPAT,EAOAS,mBACAC,EARAV,EAQAU,kBAEJ,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAW,kBAAoBV,GAC/BO,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAAuBT,EAApC,KAA4CC,EAA5C,KACAK,EAAAC,EAAAC,cAAA,gBAASN,GAAWQ,QAAQ,IAC5BJ,EAAAC,EAAAC,cAAA,SAAIL,EAAJ,SACAG,EAAAC,EAAAC,cAAA,SAAIJ,EAAJ,WACAE,EAAAC,EAAAC,cAAA,SAAIH,EAAJ,mBAlBaM,cCmEdC,cA/DX,SAAAA,EAAYf,GAAO,IAAAgB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,KAAMC,KACDsB,MAAQ,CACTrB,KAAM,CACF,CACIC,GAAI,UACJC,KAAM,UACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAEvB,CACIN,GAAI,WACJC,KAAM,WACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,KAEvB,CACIN,GAAI,WACJC,KAAM,WACNC,OAAQ,MACRC,UAAW,IACXC,kBAAmB,IACnBC,mBAAoB,IACpBC,kBAAmB,OA7BhBQ,mFAmCC,IAAAO,EAAAxB,KAChBA,KAAKyB,0BACLzB,KAAK0B,SAAWC,YAAY,kBAAMH,EAAKC,2BAA2B,uDAG5C,IAAAG,EAAA5B,KACtB6B,IAAMC,IAAI,4CACLC,KAAK,SAAAC,GACF,IAAIC,EAAS,CAAC,UAAW,WAAY,YACjCC,EAASF,EAAS9B,KAAKiC,OAAO,SAAAC,GAAQ,OAAIH,EAAOI,SAASD,EAASjC,MACvEyB,EAAKU,SAAS,CAAEpC,KAAMgC,MAEzBK,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCAI9B,IAAIG,EAAU3C,KAAKuB,MAAMrB,KAAK0C,IAAI,SAACR,GAAD,OAC9B1B,EAAAC,EAAAC,cAACiC,EAAD,CAAgB3C,KAAMkC,EAAUU,IAAKV,EAASjC,OAElD,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAW8B,GACzBjC,EAAAC,EAAAC,cAAA,mFA3DMG,aCWPgC,0LAXX,OACErC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACTH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,oCAENF,EAAAC,EAAAC,cAACoC,EAAD,cAPQjC,cCQEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.16b453ca.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react'\r\nimport './Cryptocurrency.css'\r\n\r\nclass Cryptocurrency extends Component {\r\n\r\n    render(){\r\n        var {\r\n            id,\r\n            name,\r\n            symbol,\r\n            price_usd,\r\n            percent_change_1h,\r\n            percent_change_24h,\r\n            percent_change_7d,\r\n        } = this.props.data;\r\n        return (\r\n            <li className={\"cryptocurrency \" + id}>\r\n                <p className=\"cryptocurrency-name\">{name} ({symbol})</p>\r\n                <h1>${ (+price_usd).toFixed(2) }</h1>\r\n                <p>{percent_change_1h}% 1hr</p>\r\n                <p>{percent_change_24h}% 24hrs</p>\r\n                <p>{percent_change_7d}% 7days</p>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Cryptocurrency","\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './Tickers.css';\r\nimport Cryptocurrency from './Cryptocurrency';\r\n\r\nclass Tickers extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [\r\n                {\r\n                    id: \"bitcoin\",\r\n                    name: \"Bitcoin\",\r\n                    symbol: \"BTC\",\r\n                    price_usd: \"1\",\r\n                    percent_change_1h: \"0\",\r\n                    percent_change_24h: \"0\",\r\n                    percent_change_7d: \"0\",\r\n                },\r\n                {\r\n                    id: \"ethereum\",\r\n                    name: \"Ethereum\",\r\n                    symbol: \"ETH\",\r\n                    price_usd: \"1\",\r\n                    percent_change_1h: \"0\",\r\n                    percent_change_24h: \"0\",\r\n                    percent_change_7d: \"0\",\r\n                },\r\n                {\r\n                    id: \"litecoin\",\r\n                    name: \"Litecoin\",\r\n                    symbol: \"LTC\",\r\n                    price_usd: \"1\",\r\n                    percent_change_1h: \"0\",\r\n                    percent_change_24h: \"0\",\r\n                    percent_change_7d: \"0\",\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchCryptocurrencyData();\r\n        this.interval = setInterval(() => this.fetchCryptocurrencyData(), 60 * 1000);\r\n    }\r\n\r\n    fetchCryptocurrencyData() {\r\n        axios.get(\"https://api.coinmarketcap.com/v1/ticker/\")\r\n            .then(response => {\r\n                var wanted = [\"bitcoin\", \"ethereum\", \"litecoin\"];\r\n                var result = response.data.filter(currency => wanted.includes(currency.id));\r\n                this.setState({ data: result});\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        var tickers = this.state.data.map((currency) =>\r\n            <Cryptocurrency data={currency} key={currency.id} />\r\n        );\r\n        return (\r\n            <div className=\"tickers-container\">\r\n                <ul className=\"tickers\">{tickers}</ul>\r\n                <p>Information updated every minute courtesy of coinmarketcap.com</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Tickers","import React, { Component } from 'react';\nimport Tickers from './components/Tickers';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n            <div className=\"App-header\">\n                <h2>Cryptocurrency Ticker</h2>\n            </div>\n          <Tickers/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}